#include <iostream>
#include <cmath>
#include <functional>
#include "cxxopts.hpp"
#include <vector>

using namespace std;
using std::function;

double newton_root( function < double(double) > f, function <double(double) > fprime ){ double x{1.};
  while (true){
    auto fx = f(x);
    cout << "f( " << x << " ) = " << fx << '\n';
    if( std::abs(fx)<1.e-10 ) break;
    x = x - fx/fprime(x);
  }
  return x;
};

// double newton_root( function < double(double) > f ) { double fprime{1.};
//  double h = 1e-6;
// 
//  fprime = (f(x + h) - f(x))/ h
// }

int main(){
  int n;
  cin >> n;
  auto f = [n] ( double x ) { return x*x-n; };
  auto fprime = [n] ( double x ) { return 2*x; };
  auto root = newton_root( f,fprime );
  cout << root << '\n';





  // for (int n = 2; n <= 8; n++){ 
  //  cout << "sqrt(" << n << ") = " << newton_root(

  //						  << '\n'; 
  // }

  cxxopts::Options options
    ("cxxopts",
     "Commandline options demo");
  options.add_options()
    ("v, ", " ", 
     cxxopts:: value<int>() ->default_value("1") );


  return 0;
}
